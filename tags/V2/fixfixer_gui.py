#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Jan 10 16:12:16 2012

import wx
import os, sys

import fixfixer_actionhistory
import fixfixer_marketdata
import fixfixer_about
import fixfixer_messagetree
import fixfixer_help


class FixFixerGui(wx.Frame):
    """GUI application for handling FIX messages."""
    def __init__(self, *args, **kwds):
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.AboutDialog = fixfixer_about.AboutFixFixer(self)
        self.ActionHistory = fixfixer_actionhistory.FixActionHistory(self)
        self.window_1 = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER|
                                                          wx.SP_LIVE_UPDATE)
        self.window_1_pane_2 = wx.Panel(self.window_1, -1)
        self.window_1_pane_1 = wx.Panel(self.window_1, -1, 
                               style=wx.TAB_TRAVERSAL|wx.FULL_REPAINT_ON_RESIZE)

# ----- Menu Bar ------------------------------------------------------------- #
        self.frame_1_menubar = wx.MenuBar()

        # File Menu
        wxglade_file_menu = wx.Menu()
        self.LoadMessage = wx.MenuItem(wxglade_file_menu, 1, 
                                "&Load\tCtrl-O", "Load_message", wx.ITEM_NORMAL)
        self.SaveMessage = wx.MenuItem(wxglade_file_menu, 2, 
                                "&Save\tCtrl-S", "Save_message", wx.ITEM_NORMAL)
        self.ExitProgram = wx.MenuItem(wxglade_file_menu, wx.ID_EXIT, 
                                "&Exit\tCtrl-Q", "Quit", wx.ITEM_NORMAL)
        wxglade_file_menu.AppendItem(self.LoadMessage)
        wxglade_file_menu.AppendItem(self.SaveMessage)
        wxglade_file_menu.AppendSeparator()
        wxglade_file_menu.AppendItem(self.ExitProgram)
        
        # Edit Menu
        wxglade_edit_menu = wx.Menu()
        self.Undo = wx.MenuItem(wxglade_edit_menu, 4, 
                                "&Undo\tCtrl-Z", "Undo_Action", wx.ITEM_NORMAL)
        self.Redo = wx.MenuItem(wxglade_edit_menu, 5, 
                                "&Redo\tCtrl-Y", "Redo_Action", wx.ITEM_NORMAL)
        self.ClearMessage = wx.MenuItem(wxglade_edit_menu, 6, 
                                "&Clear", "Clear_Message", wx.ITEM_NORMAL)
        wxglade_edit_menu.AppendItem(self.Undo)
        wxglade_edit_menu.AppendItem(self.Redo)
        wxglade_edit_menu.AppendSeparator()
        wxglade_edit_menu.AppendItem(self.ClearMessage)
        
        # Help Menu
        wxglade_help_menu = wx.Menu()
        self.ShowHelp = wx.MenuItem(wxglade_help_menu, 7, 
                                "&Help", "Help Dialog", wx.ITEM_NORMAL)
        self.ShowAbout = wx.MenuItem(wxglade_help_menu, 8, 
                                "&About", "About Dialog", wx.ITEM_NORMAL)
        wxglade_help_menu.AppendItem(self.ShowHelp)
        wxglade_help_menu.AppendItem(self.ShowAbout)
        
        self.frame_1_menubar.Append(wxglade_file_menu, "File")
        self.frame_1_menubar.Append(wxglade_edit_menu, "Edit")
        self.frame_1_menubar.Append(wxglade_help_menu, "Help")

        self.SetMenuBar(self.frame_1_menubar)
# ----- Menu Bar end --------------------------------------------------------- #

        self.market_data = fixfixer_marketdata.MarketData(self.window_1_pane_1, 
                                                         -1, self.ActionHistory)
        self.sort_button = wx.Button(self.window_1_pane_1, -1, 
                                "Sort message", style=wx.BU_BOTTOM)
        self.message_tree = fixfixer_messagetree.MessageTree(
                            self.window_1_pane_2, -1, self.ActionHistory)
        self.but = wx.Button(self.window_1_pane_2, -1, "Create message")

        self.__set_properties()
        self.__do_layout()
        self.__do_bindings()


    def __set_properties(self):
        self.SetTitle("Fix Message fixer")
        self.SetIcon( wx.Icon("fix-fixer.ico", wx.BITMAP_TYPE_ICO) )
        self.Undo.Enable(False)
        self.Redo.Enable(False)

    def __do_layout(self):
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_2.Add(self.market_data, 1, wx.ALL|wx.EXPAND, 0)
        sizer_2.Add(self.sort_button, 0, wx.ALL|wx.ALIGN_BOTTOM|
                                                wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.window_1_pane_1.SetSizer(sizer_2)
        sizer_3.Add(self.message_tree, 1, wx.EXPAND, 0)
        sizer_3.Add(self.but, 0, 0, 0)
        self.window_1_pane_2.SetSizer(sizer_3)
        self.window_1.SplitVertically(self.window_1_pane_1,
                                      self.window_1_pane_2)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()

    def __do_bindings(self):
        # File Menu
        self.Bind(wx.EVT_MENU, self.load_message, self.LoadMessage)
        self.Bind(wx.EVT_MENU, self.save_message, self.SaveMessage)
        self.Bind(wx.EVT_MENU, self.quit_app, self.ExitProgram)

        # Edit Menu
        self.Bind(wx.EVT_MENU, self.undo_action, self.Undo)
        self.Bind(wx.EVT_MENU, self.redo_action, self.Redo)
        self.Bind(wx.EVT_MENU, self.message_clear, self.ClearMessage)

        # Help Menu
        self.Bind(wx.EVT_MENU, self.show_help, self.ShowHelp)
        self.Bind(wx.EVT_MENU, self.show_about, self.ShowAbout)

        # Buttons
        self.Bind(wx.EVT_BUTTON, self.message_sort, self.sort_button)
        self.Bind(wx.EVT_BUTTON, self.message_create, self.but)

        # Exit
        self.Bind(wx.EVT_CLOSE, self.quit_app)

        # Key bindings
        self.key_load = wx.NewId()
        self.key_save = wx.NewId()
        self.key_quit = wx.NewId()
        self.key_undo = wx.NewId()
        self.key_redo = wx.NewId()
        self.Bind(wx.EVT_MENU, self.load_message, id=self.key_load)
        self.Bind(wx.EVT_MENU, self.save_message, id=self.key_save)
        self.Bind(wx.EVT_MENU, self.quit_app, id=self.key_quit)
        self.Bind(wx.EVT_MENU, self.undo_action, id=self.key_undo)
        self.Bind(wx.EVT_MENU, self.redo_action, id=self.key_redo)
        self.accel_tbl = wx.AcceleratorTable(
                                    [(wx.ACCEL_CTRL, ord('o'), self.key_load),
                                     (wx.ACCEL_CTRL, ord('s'), self.key_save),
                                     (wx.ACCEL_CTRL, ord('q'), self.key_quit),
                                     (wx.ACCEL_CTRL, ord('z'), self.key_undo),
                                     (wx.ACCEL_CTRL, ord('y'), self.key_redo),
                                    ])
        self.SetAcceleratorTable(self.accel_tbl)


    def quit_app(self, event):
        """Event handler to exit the application."""
        dlg = wx.MessageDialog(self, "Are you sure you wish to exit?",
                               "Confirm Exit", wx.CANCEL|wx.OK|wx.ICON_QUESTION)
        result = dlg.ShowModal()
        dlg.Destroy()
        if result == wx.ID_OK: sys.exit()

    def undo_action(self, event):
        """Event handler for Undo action."""
        self.ActionHistory.Undo()

    def redo_action(self, event):
        """Event handler for Redo action."""
        self.ActionHistory.Redo()

    def show_about(self, event):
        """Event handler to show the About Dialog."""
        self.AboutDialog.show()

    def show_help(self, event):
        """Event handler to show the Help Dialog."""
        self.HelpDialog = fixfixer_help.FixFixerHelpFrame(self)
        self.HelpDialog.show()

    def load_message(self, event):
        """Load message from .TXT file."""
        message_file_dialog = wx.FileDialog(self) 
        if (message_file_dialog.ShowModal() == wx.ID_CANCEL): return
        message_file = message_file_dialog.GetFilename()
        if (message_file_dialog.GetFilename()==""): return
        message_file_dir = message_file_dialog.GetPath()
        f = file(message_file_dir, 'r')
        self.market_data.SetMessage(f.read())
        f.close()
        self.ActionHistory.ClearHistory()

    def save_message(self, event):
        """Save message to .TXT file."""
        filters = 'All files (*.*)|*.*|Text files (*.txt)|*.txt'
        message_file_dialog = wx.FileDialog(self, message = 'Save message as...'
                                            , wildcard=filters, style= wx.SAVE |
                                            wx.OVERWRITE_PROMPT) 
        if (message_file_dialog.ShowModal() == wx.ID_CANCEL): return
        message_file = message_file_dialog.GetFilename()
        if (message_file_dialog.GetFilename()==""): return
        message_file_dir = message_file_dialog.GetPath()
        f = file(message_file_dir, 'w')
        f.write(self.market_data.GetMessage())
        f.close()

    def message_create(self, event):
        """Updates market data to reflect the contents of the MessageTree."""
        if self.message_tree.IsValid():
            message = self.message_tree.get_message()
            self.market_data.SetMessage(message)

    def message_sort(self, event):
        """Updates MessageTree to reflect the contents of the market data."""
        market_data = self.market_data.GetMessage()
        self.message_tree.set_message(market_data)

    def message_clear(self, event):
        """Clears the MessageTree contents."""
        self.ActionHistory.Write('clear', (self.market_data.GetValue(), 
                                           self.message_tree.get_message()))
        self.market_data.ChangeValue("")
        self.message_tree.clear()

